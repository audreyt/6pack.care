name: Sync index.md from Google Doc

on:
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 lxml

      - name: Update index.md from published Google Doc
        run: |
          python3 <<'PY'
          from pathlib import Path
          import requests
          from bs4 import BeautifulSoup, NavigableString, Tag

          DOC_URL = "https://docs.google.com/document/d/e/2PACX-1vTvWQ1BT8cUYdjPNCTFt-LL0tm_zv1KpvJyIzdS7NuHIbIdjFrwD243eMGie5O2um-iEuAGRRRLZ6PQ/pub"

          index_path = Path("index.md")
          existing = index_path.read_text(encoding="utf-8")
          if not existing.startswith("---"):
              raise SystemExit("index.md must begin with front matter")
          parts = existing.split("---", 2)
          if len(parts) < 3:
              raise SystemExit("Could not parse front matter in index.md")
          front_matter = "---" + parts[1] + "---\n\n"

          response = requests.get(DOC_URL, timeout=30)
          response.raise_for_status()
          soup = BeautifulSoup(response.text, "lxml")

          contents = soup.find("div", id="contents")
          if contents is None:
              raise SystemExit("Could not locate contents div in published document")

          # Find the marker for the index.md tab
          start_tag = None
          for child in contents.descendants:
              if isinstance(child, Tag) and child.get_text(strip=True) == "index.md":
                  start_tag = child
                  break
          if start_tag is None:
              raise SystemExit("Could not find index.md section marker in document")

          collected = []
          for sibling in start_tag.next_siblings:
              if isinstance(sibling, NavigableString):
                  continue
              if isinstance(sibling, Tag):
                  text = sibling.get_text(strip=True)
                  if not text:
                      continue
                  if text.lower().endswith(".md") and text.lower() != "index.md":
                      break
                  if text.strip().lower() == "manifesto":
                      break
                  collected.append(sibling)

          if not collected:
              raise SystemExit("No content collected for index.md tab")

          lines = []
          def append_blank():
              if lines and lines[-1] != "":
                  lines.append("")

          for node in collected:
              if not isinstance(node, Tag):
                  continue
              name = node.name.lower()
              if name in {"h1", "h2", "h3", "h4", "h5", "h6"}:
                  level = int(name[1])
                  heading = "#" * level + " " + node.get_text(strip=True)
                  lines.append(heading)
                  append_blank()
              elif name in {"p", "li"}:
                  text = node.get_text(separator=" ")
                  text = " ".join(text.split())
                  if text:
                      lines.append(text)
                      append_blank()
              elif name in {"ul", "ol"}:
                  bullet = "-" if name == "ul" else "1."
                  for li in node.find_all("li", recursive=False):
                      text = li.get_text(separator=" ")
                      text = " ".join(text.split())
                      if text:
                          lines.append(f"{bullet} {text}")
                  append_blank()
              else:
                  html_block = node.decode()
                  if html_block.strip():
                      lines.append(html_block.strip())
                      append_blank()

          heading_titles = [
              "Our Mission",
              "About the Project",
              "From Care to Code: Why â¿» Plurality Offers a Coherent Framework to the AI Alignment Problem",
              "Kami in the Machine: How Care Ethics Can Help AI Alignment",
          ]
          for title in heading_titles:
              for idx, line in enumerate(lines):
                  if line.strip() == title:
                      lines[idx] = f"## {title}" if not line.startswith("#") else line
                      if idx + 1 >= len(lines) or lines[idx + 1].strip():
                          lines.insert(idx + 1, "")
                      break

          cleaned = []
          for line in lines:
              if line == "" and cleaned and cleaned[-1] == "":
                  continue
              cleaned.append(line.rstrip())
          content = "\n".join(cleaned).strip() + "\n"

          index_path.write_text(front_matter + content, encoding="utf-8")
          PY

      - name: Show changes
        run: git diff --stat

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      - name: Build site with Jekyll
        run: bundle exec jekyll build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: site-build
          path: |
            index.md
            _site
          if-no-files-found: error
